{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fswiss\fcharset77 ArialMT;\f1\fswiss\fcharset77 Arial-BoldMT;\f2\fmodern\fcharset77 CourierNewPSMT;
}
{\colortbl;\red255\green255\blue255;}
\vieww12000\viewh15840\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs42 \cf0 Jamoma RampLib API
\fs22 \
_______________________________________________\
\
\

\fs30 Introduction
\fs22 \
\
The Jamoma RampLib API provides a means by which to create and use "Ramp Units" in Jamoma.  A Ramp Unit is a self-contained algorithm that can slide from an existing value to a new value over a specified amount of time.  Ramp Units may use a variety of different timing mechanisms, functions for defining the shape of the ramp, etc.\
\
The Jamoma project uses these Ramp Units inside of Max externals such as 
\f1\b jcom.parameter
\f0\b0 , 
\f1\b jcom.message
\f0\b0 , and 
\f1\b jcom.ramp
\f0\b0 .  However, the API is designed to be agnostic with terms of the hosting environment and thus can be used to provide ramping functionality in other hosts such as a Pd or SuperCollider.\
\
This document discusses both the creation of a new Ramp Unit, as well as the use of a Ramp Unit from within a Max external.  The best documentation of this, however, is the source code for the aforementioned Max externals in the Jamoma project.\
\
\

\fs30 How to create a Ramp Unit\

\fs22 \
Every Ramp Unit should consist of two files: a source file and a header file that provides an interface for the source file.  The header file must contain a data structure that contains variables for the instance of a particular Ramp Unit and prototypes for the functions in the source file.  It should also use a preprocessor directive to include the ramplib.h header file.\
\
Every Ramp Unit must define the following functions:\
	create()		Allocates memory, sets initial state, sets callback function to the host\
	destroy()	Frees memory\
	attrset()		Set any attributes your Ramp Unit may have\
	attrget()	Get the value of an attribute\
	go()		start ramping to a new value over a period of time\
	set()		stop the ramp (if it is going) and set its value\
	stop()		stop the ramp\
	tick()  		execute one step of the ramp\
\
All parameters of a Ramp Unit must be set using attrset() and not by directly accessing a member variable or defining a custom accessor if possible.  The attrset() method receives both a selector and a value.  The selector should be an int defining what happens with the incoming value.  Furthermore, the selector should be given a self-documenting name by using an enum such as the one found in ramplib.h.\
\
The create() method must accept two arguments.  The first argument is a function pointer provided by the host.  The function pointed to by this pointer will be called when the Ramp Unit generates a new value.  The second argument is a generic pointer provided by the host.  This pointer should be passed back to the host via its callback method.  The Ramp Unit does not directly do anything with this second pointer except pass it back to the host.\
\
Please reference the example Ramp Unit files for 
\f1\b none.rampunit 
\f0\b0 and 
\f1\b linear.sched.rampunit 
\f0\b0 for a model of how to create your own Ramp Units.\
\
\

\fs30 How to use a Ramp Unit in a Max External\

\fs22 \
As a part of the RampLib, a C++ wrapper class has been created that wraps a RampUnit as an object.  Using this class is the recommended means of loading and using a RampUnit.  See RampUnitWrap.h for the interface.\
\
THE 7 STEP TUTORIAL (using the linear.max ramp unit as an example)\
\
1. Add the header and source file for RampUnitWrap to the project\

\f2 	RampUnitWrap.h\
	RampUnitWrap.cpp\

\f0 \
2. Include the header in your Max externals source file\

\f2 	#include "RampUnitWrap.h"\

\f0 \
3. Add a pointer to the object to your Max external's data structure\

\f2 	rampunit	*my_ramp;\

\f0 \
4. Create a callback method.  This will be called by the ramp unit when it produces a new value.\

\f2 	void myexternal_callback(void *v, float value)\
	\{	\
		t_myexternal *x = (t_myexternal *)v;\
		outlet_float(x->outlets[k_outlet_value], value);\
	\}\

\f0 	\
5. Instantiate the ramp unit object in your new() method, passing the following as arguments:\
	A. The name of the rampunit (without the file extension) as a string\
	B. The address of your callback function\
	C. An optional baton (generic pointer that will be passed back to your callback function)\
\

\f2 	x->my_ramp = new rampunit("linear.sched", myexternal_callback, (void *)x);\

\f0 	\
6. Delete the ramp unit instance in your free() method\

\f2 	delete x->my_ramp;\

\f0 	\
7. Add additional methods as needed\
\
\
The above method will compile the code directly into your external.  There are methods for making the ramp unit a dynamically loaded plug-in to the external as well.  \
\
\
\
\
}